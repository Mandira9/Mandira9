LAB-01
//1a. Write a lex program to recognize valid a arithmetic expression. Identifiers in the expression could be only integers & operators could be + & *.
count the identifier & operators present and print them separately.


%{
#include<stdio.h>
int v=0;op=0;id=0;
%}
%%
[A-Z a-z 0-9]+ {id++;printf("\n identifier: ");ECHO;}
[+|-|*|/|=] {op++;printf("\n operator: ");ECHO;}
"("  {v++;}
")"  {v--;}
.|\n {return 0;}
%%

int main()
{
      printf("enter the expression:\n");
      yylex();
      if((op+1)==id && v==0)
      {
           printf("\n\nIdentifiers are:%d\nOperator are:%d\n",id,op);
           printf("\nExpression is Valid\n");
      }
      else
           printf("\nExpression is Invalid\n");
}

1b. Write Yacc program to evaluate arithmetic expression involving opertor +,-,*and/.


%{
#include "y.tab.h"
int yylval;
%}

%%
[0-9]+     {yylval=atoi(yytext);return num;}
[+|-|*|/]  {return yytext[0];}
[)]        {return yytext[0];}
[(]        {return yytext[0];}
.                 {;}
\n                {return 0;}
%%


%{
#include<stdio.h>
#include<stdlib.h>
%}

%token num
%left '+' '-'
%left '*' '/'
%%
input: exp{printf("%d\n",$$);exit(0);}
exp: exp'+'exp {$$=$1+$3;}
   | exp'-'exp {$$=$1-$3;}
   | exp'*'exp {$$=$1*$3;}
   | exp'/'exp {if($3==0){printf("Divide by Zero.Invalid expression.\n");exit(0);}else $$=$1/$3;}
   |'('exp')'  {$$=$2;}
   | num       {$$=$1;};
%%

int yyerror()
{
     printf("Error.Invalid Expression.\n");
     exit(0);
}
int main()
{
    printf("enter an expression:\n");
    yyparse();
}

LAB-02
//Develop, Implement and Execute a program using YACC tool to recognize all strings ending with b preceded by n a’s using the 
grammar an b (note: input n value)

%{
#include<stdio.h>
#include<stdlib.h>
  %}
  %token A B
  %%
  input:s'\n'{printf("Sucessfull Grammar\n"); exit(0);}
s: A s1 B|B
s1: ;|A s1
  %%
int main()
{
  printf("Enter A String\n");
  yyparse();
  return 0; 
}
int yyerror()
{
  printf("Error\n");
  exit(0);
}


LAB-03
//Design, develop and implement YACC/C program to construct Predictive / LL(1) Parsing Table for the grammar rules: A aBa , B 
bB | . Use this table to parse the sentence: abba$

#include<stdlib.h>
#include<string.h>
#include<stdio.h>
char prod[3][10]={"A->aBa","B->bB","B->@"}, input[10],stack[25];
int top=-1; int j=0,k,l;
void push(char item)
{
stack[++top]=item;
}
void pop()
{
top=top-1;
}
void display()
{
int j;
for(j=top;j>=0;j--)
printf("%c",stack[j]);
}
void stackpush(char p)
{
if(p=='A')
{
pop();
for(j=strlen(prod[0])-1;j>=3;j--)
push(prod[0][j]);
}
else
{
pop();
for(j=strlen(prod[1])-1;j>=3;j--)
push(prod[1][j]);
}
}
void main()
{
char c; int i;
printf("first(A)={a}\t");
printf("follow(A)={$}\n");
printf("first(B)={b,@}\t");
printf("follow(B)={a}\n\n");
printf("\t a \t b \t $ \n");
printf("A\t%s\n",prod[0]);
printf("B\t%s\t%s\n",prod[2],prod[1]);
printf("enter the input string terminated with $ to parse:-");
scanf("%s",input);
for(i=0;input[i]!='\0';i++)
{
if((input[i]!='a')&&(input[i]!='b')&&(input[i]!='$'))
{
printf("invalid string");
exit(0);
}
}
if(input[i-1]!='$')
{
printf("\n\nInput string entered without end marker $");
exit(0);
}
push('$');
push('A');
i=0;
printf("\n\n");
printf("stack\tInput\taction");
printf("\n---------\n");
while(i!=strlen(input)&&stack[top]!='$')
{
printf("\n");
for(l=top;l>=0;l--)
printf("%c",stack[l]);
printf("\t");
for(l=i;l<strlen(input);l++)
printf("%c",input[l]);
printf("\t");
if(stack[top]=='A')
{
printf("A->aBa");
stackpush('A');
}
else if(stack[top]=='B')
{
if(input[i]!='b')
{
printf("B->@");
printf("\t matched @");
pop();
}
else
{
printf("B->bB");
stackpush('B');
}
}
else
{
if(stack[top]==input[i])
{
printf("pop%c",input[i]);
printf("\tmatched %c",input[i]);
pop();
i++;
}
else
break;
}
}
if(stack[top]=='$' && input[i]=='$')
{
printf("\n$\t$");
printf("\nValid string Accepted\n");
}
else
printf("\nInvalid string rejected\n");
}


Lab-04
//Design, develop and implement YACC/C program to demonstrate Shift Reduce Parsing technique for the grammar rules: E E+T | T, 
T T*F | F, F (E) | id and parse the sentence: id + id * id

#include<stdio.h>
#include<string.h>
int k=0,z=0,i=0,j=0,c=0;
char a[16],ac[20],stk[15],act[10];
void check();
void main()
{
puts("GRAMMAR is E->E+E \n E->E*E \n E->(E) \n
E->id");
puts("enter input string ");
gets(a);
c=strlen(a);
strcpy(act,"SHIFT->");
puts("stack \t input \t action");
for(k=0,i=0; j<c; k++,i++,j++)
{
if(a[j]=='i' && a[j+1]=='d')
{
stk[i]=a[j];
stk[i+1]=a[j+1];
stk[i+2]='\0';
a[j]=' ';
a[j+1]=' ';
printf("\n$%s\t%s$\t%sid",stk,a,act);
check();
}
else
{
stk[i]=a[j];
stk[i+1]='\0';
a[j]=' ';
printf("\n$%s\t%s$\t%ssymbols",stk,a,act);
check();
}
}
}
void check()
{
strcpy(ac,"REDUCE TO E");
for(z=0; z<c; z++)
if(stk[z]=='i' && stk[z+1]=='d')
{
stk[z]='E';
stk[z+1]='\0';
printf("\n$%s\t%s$\t%s",stk,a,ac);
j++;
}
for(z=0; z<c; z++)
if(stk[z]=='E' && stk[z+1]=='+' &&
stk[z+2]=='E')
{
stk[z]='E';
stk[z+1]='\0';
stk[z+2]='\0';
printf("\n$%s\t%s$\t%s",stk,a,ac);
i=i-2;
}
for(z=0; z<c; z++)
if(stk[z]=='E' && stk[z+1]=='*' &&
stk[z+2]=='E')
{
stk[z]='E';
stk[z+1]='\0';
stk[z+1]='\0';
printf("\n$%s\t%s$\t%s",stk,a,ac);
i=i-2;
}
for(z=0; z<c; z++)
if(stk[z]=='(' && stk[z+1]=='E' && stk[z+2]==')')
{
stk[z]='E';
stk[z+1]='\0';
stk[z+1]='\0';
printf("\n$%s\t%s$\t%s",stk,a,ac);
i=i-2;
}
}

Lab -05
//Design, develop and implement a C/Java program to generate the machine code using Triples for the statement A = -B * (C +D) whose 
intermediate code in three-address form:
T1 = -B
T2 = C + D
T3 = T1 + T2
A = T3

#include<stdio.h>
#include<stdlib.h>
#include<ctype.h>
char op[2],arg1[5],arg2[5],result[5];
void main()
{
FILE *fp1,*fp2;
fp1=fopen("input.txt","r");
fp2=fopen("output.txt","w");
while(!feof(fp1))
{
fscanf(fp1,"%s%s%s%s",result,arg1,op,arg2);
if(strcmp(op,"+")==0)
{
fprintf(fp2,"\nMOV R0,%s",arg1);
fprintf(fp2,"\nADD R0,%s",arg2);
fprintf(fp2,"\nMOV %s,R0",result);
}
if(strcmp(op,"*")==0)
{
fprintf(fp2,"\nMOV R0,%s",arg1);
fprintf(fp2,"\nMUL R0,%s",arg2);
fprintf(fp2,"\nMOV %s,R0",result);
}
if(strcmp(op,"-")==0)
{
fprintf(fp2,"\nMOV R0,%s",arg1);
fprintf(fp2,"\nSUB R0,%s",arg2);
fprintf(fp2,"\nMOV %s,R0",result);
}
if(strcmp(op,"/")==0)
{
fprintf(fp2,"\nMOV R0,%s",arg1);
fprintf(fp2,"\nDIV R0,%s",arg2);
fprintf(fp2,"\nMOV %s,R0",result);
}
if(strcmp(op,"=")==0)
{
fprintf(fp2,"\nMOV R0,%s",arg1);
fprintf(fp2,"\nMOV %s,R0",result);
}
}
fclose(fp1);
fclose(fp2);
}

Lab -06
//a) Write a LEX program to eliminate comment lines in a C program and copy the resulting program into a separate file.
b) Write YACC program to recognize valid identifier, operators and keywords in the given text (C program) file.

6a)lex file
%{
#include<stdio.h>
int sl=0;
int ml=0;
%} 
%%
"/*"[a-zA-Z0-9' '\t\n]+"*/" { ml++;}
"//".* {sl++;}
%%
main()
{
yyin=fopen("f1.c","r");
yyout=fopen("f2.c","w");
yylex();
fclose(yyin);
fclose(yyout);
printf("\n Number of single line comments are = %d\n",sl); 
 printf("\nNumber of multiline comments are =%d\n",ml);
}

6b)lex file
%{
#include <stdio.h>
#include "y.tab.h"
extern yylval;
%}
%%
[ \t];
[+|-|*|/|=|<|>] {printf("operator is %s\n",yytext);return OP;}
[0-9]+ {yylval = atoi(yytext); printf("numbers is %d\n",yylval); return DIGIT;} 
int|char|bool|float|void|for|do|while|if|else|return {printf("keyword is %s\n",yytext);return KEY;}
[a-zA-Z0-9]+ {printf("identifier is %s\n",yytext);return ID;}
. ;
%%

6b)yacc file
%{
#include <stdio.h>
#include <stdlib.h>
int id=0, dig=0, key=0, op=0;
%}
%token DIGIT ID KEY OP
%%
input:
DIGIT input { dig++; }
| ID input { id++; }
| KEY input { key++; }
| OP input {op++;}
| DIGIT { dig++; }
| ID { id++; }
| KEY { key++; }
| OP { op++;}
;
%%
#include <stdio.h>
extern int yylex();
extern int yyparse();
extern FILE *yyin;
main() 
{
FILE *myfile = fopen("f2.c", "r"); 
if (!myfile) 
{
printf("I can't open f2.c!");
return -1;
}
yyin = myfile;
do{
yyparse();
}while (!feof(yyin));
printf("numbers = %d\nKeywords = %d\nIdentifiers = %d\noperators = %d\n",dig, key,id, 
op);
}
void yyerror() {
printf("EEK, parse error! Message: ");
exit(-1);
}

LAB-07
//Design, develop and implement a C/C++/Java program to simulate the working of Shortest remaining time and Round Robin (RR) 
scheduling algorithms. Experiment with different quantum sizes for RR algorithm.
          
#include<stdio.h>
int at[10],bt[10],rt[10];
int i,j,smallest,count=0;
int n;
int time;
int remain,flag=0;
int time_quantum;
int wait_time=0;
double wt=0,tat=0,end;


void srjf()
{
        for (time=0; count != n; time++)
        {
                smallest=9;
                for(i=0; i<n; i++)
                {
                        if(at[i]<=time && bt[i]<bt[smallest] && bt[i]>0)
                                smallest = i;
                }
                bt[smallest]-- ;
                if(bt[smallest] == 0)
                {
                        count++;
                        end = time+1;
                        tat = tat + end - at[smallest];
                        wt = wt + end - at[smallest] - rt[smallest];
                }
        }
        printf("\n Average waiting time: %lf\n",wt/n);
        printf("\nAvg Turn Around time: %lf\n",tat/n);
}


void rr()
{
        printf("Enter time Quantum: \t");
        scanf("%d",&time_quantum);
        printf("\n\n Process\t Turn around time\t Waiting time\n\n");
        for(time = 0, count = 0; remain!=0;)
        {
                if(rt[count] <= time_quantum && rt[count] > 0)
{
                        time += rt[count];
                        rt[count] = 0;
                        flag = 1;
                }
                else if(rt[count] > 0)
                {
                        rt[count] -= time_quantum;
                        time += time_quantum;
                }
                if(rt[count] == 0 && flag == 1)

                {
                        remain--;
                        printf("p[%d]\t | \t%d\t | \t%d\t \n",count+1 , time-at[count] , time-at[count]-bt[count]);
                        tat += time-at[count];
                        wait_time = time-at[count]-bt[count];
                        flag = 0;
                        if(count == n-1)
                                count = 0;
                        else if(at[count+1] <= time)
                                count ++;
                        else
                                count = 0;
                }
        }
        printf("\n Avg waiting time: %f\n",wait_time*1.0/n);
        printf("\n Avg Turn around time: %f\n", tat*1.0/n);
}

//Main function
int main()
{
        int ch;
        printf("\n Enter the no. of process(less than 9): ");
        scanf("%d",&n);
        printf("\n Enter the Arrival time \n");
        for (i = 0; i < n; i++)
                scanf("%d", &at[i]);
        printf("\n Enter the burst time \n");
        for (i = 0; i < n; i++)
               scanf("%d", &bt[i]);
        for (i = 0; i < n; i++)
                rt[i] = bt[i];
        printf("\n 1) Shortest Remaining Job First(SRIF)\n 2)Round Robin(RR) \n\n Enter your choice: ");
        scanf("%d",&ch);
        switch(ch)
        {
                case 1 : bt[9] = 9999;
                         srjf();
                         break;
                case 2 : remain = n;
                         rr();
                         break;
                default : printf("Enter Correct Choice!");
        }
        return 0;
}


Lab -08
//Design, develop and implement a C/C++/Java program to implement Banker’s algorithm. Assume suitable input required to demonstrate 
the results.

#include<stdio.h>
#include<stdlib.h>
void main()
{
    int k=0,output[10],d=0,t=0,ins[5],i,avail[5],allocated[10][5],need[10][5],MAX[10][5],pno,P[10],count=0,prevD=0,cuurD=0,rz,j;

    printf("\n Enter the number of rescources");
    scanf("%d",&rz);

    printf("\n Enter the avalaiable matrix :\n");
    for(i=0;i<rz;i++)
      scanf("%d",&avail[i]);
    printf("\n Enter  the no of process\n");
    scanf("%d",&pno);
    printf("\n Enter the alloacation matrix\n");
    for (i=0;i<rz;i++)
    printf("%c",(i+97));
    printf("\n");
    for(i=0;i<pno;i++)
    {
        P[i]=i;
        printf("P[%d]",P[i]);
        for(j=0;j<rz;j++)
        {
            scanf("%d",&allocated[i][j]);
        }
    }

    printf("\n Enter the max matrix: \n");
    for(i=0;i<pno;i++)
    {
        printf("P[%d]",i);
        for(j=0;j<rz;j++)
         scanf("%d",&MAX[i][j]);
    }
    printf("\n");
    A:d=-1;
    for (i=0;i<pno;i++)
    {
        count=0;t=P[i];
        for (j=0;j<rz;j++)
        {
            need[t][j]=MAX[t][j]-allocated[t][j];
            if(need[t][j]<=avail[j])
             count++;
        }
            if(count==rz)
            {
                output[k++]=P[i];
                for(j=0;j<rz;j++)
                 avail[j]+=allocated[t][j];
            }
            else{
                P[++d]=P[i];
            }
        }
        prevD=cuurD;
        cuurD=d;
        if(prevD==cuurD)
        {
            printf("its is not a safe sequence");

            exit(0);

        }
        else if(d!=-1)
        {
            pno=d+1;
            goto A;
        }

    printf("Safe sequence is :\n");
    printf("\t <");
    for(i=0;i<k;i++)
     printf("P[%d]",output[i]);
    printf(">");
}

Lab-09
//Design, develop and implement a C/C++/Java program to implement page replacement algorithms LRU and FIFO. Assume suitable input 
required to demonstrate the results.

#include<stdio.h>
#include<stdlib.h>

void FIFO(char [ ],char [ ],int,int);
void lru(char [ ],char [ ],int,int);
void opt(char [ ],char [ ],int,int);

int main()
{
    int ch,YN=1,i,l,f;
    char F[10],s[25];
    printf("\nEnter the no of empty frames: ");
    scanf("%d",&f);
    printf("\nEnter the length of the string: ");
    scanf("%d",&l);
    printf("\nEnter the string: ");
    scanf("%s",s);
    for(i=0;i<f;i++)
        F[i]=-1;

    do
    {
        printf("\n***** MENU *****");
        printf("\n1:FIFO\n2:LRU \n3:EXIT");
        printf("\nEnter your choice: ");
        scanf("%d",&ch);

        switch(ch)
        {
            case 1: for(i=0;i<f;i++)
                        F[i]=-1;
                    FIFO(s,F,l,f);
                    break;

            case 2: for(i=0;i<f;i++)
                        F[i]=-1;
                    lru(s,F,l,f);
                    break;

            case 3: exit(0);
        }
        printf("\n\nDo u want to continue IF YES PRESS 1\nIF NO PRESS 0 : ");
        scanf("%d",&YN);
    } while(YN==1);
    return(0);
}
void FIFO(char s[],char F[],int l,int f)
{
    int i,j=0,k,flag=0,cnt=0;
    printf("\n\tPAGE\t FRAMES\t\t\t FAULTS");
    for(i=0;i<l;i++)
    {
        for(k=0;k<f;k++)
        {
            if(F[k]==s[i])
                flag=1;
        }

        if(flag==0)
        {
            printf("\n\t%c\t",s[i]);
            F[j]=s[i];
            j++;
            for(k=0;k<f;k++)
                printf(" %c",F[k]);
            printf("\tPage-fault%d",cnt);
            cnt++;
        }

        else
        {
            flag=0;
            printf("\n\t%c\t",s[i]);
            for(k=0;k<f;k++)
                printf(" %c",F[k]);
            printf("\tNo page-fault");
        }
        if(j==f)
            j=0;
    }
}


void lru(char s[],char F[],int l,int f)
{
    int i,j=0,k,m,flag=0,cnt=0,top=0;
    printf("\n\tPAGE\t FRAMES\t\t\t FAULTS");
    for(i=0;i<l;i++)
    {
        for(k=0;k<f;k++)
        {
            if(F[k]==s[i])
            {
                flag=1;
                break;
            }
        }
        printf("\n\t%c\t",s[i]);
        if(j!=f && flag!=1)
        {
            F[top]=s[i];
            j++;
            if(j!=f)
                top++;
        }

        else
        {
            if(flag!=1)
            {
                for(k=0;k<top;k++)
                    F[k]=F[k+1];
                F[top]=s[i];
            }

            if(flag==1)
            {
                for(m=k;m<top;m++)
                    F[m]=F[m+1];
                F[top]=s[i];
            }
        }

        for(k=0;k<f;k++)
            printf(" %c",F[k]);

        if(flag==0)
        {
            printf("\tPage-fault%d",cnt);
            cnt++;
        }
        else
            printf("\tNo page fault");
        flag=0;
    }
}


STEPS:
LEX

vi prg.l
lex prg.l
cc lex.yy.c -ll
./a.out

YACC:

vi prg.y
yacc -d prg.y
lex prg.l
cc y.tab.c lex.yy.c -ll
./a.out

